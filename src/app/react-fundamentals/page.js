"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import CodeEditor from "../../components/editor/CodeEditor";
import CodePlayground from "../../components/editor/CodePlayground";
import ExerciseWithPreview from "../../components/editor/ExerciseWithPreview";
import Link from "next/link";

export default function ReactFundamentalsPage() {
  const [activeSection, setActiveSection] = useState("introduction");
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [progress, setProgress] = useState(() => {
    if (typeof window !== 'undefined') {
      return JSON.parse(localStorage.getItem('reactCourseProgress') || '{}');
    }
    return {};
  });
  
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('reactCourseProgress', JSON.stringify(progress));
    }
  }, [progress]);

  const markAsCompleted = (sectionKey) => {
    setProgress(prev => ({
      ...prev,
      [sectionKey]: true
    }));
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.3 },
    },
  };

  // Contenu des sections
  const sections = {
    introduction: {
      title: "Introduction √† React",
      icon: "üìö",
      color: "bg-blue-500",
      content: `
        React est une biblioth√®que JavaScript pour construire des interfaces utilisateur. 
        D√©velopp√©e par Facebook (maintenant Meta), elle est devenue l'une des biblioth√®ques 
        les plus populaires pour le d√©veloppement front-end.
        
        React utilise une approche d√©clarative et bas√©e sur les composants, ce qui rend le code 
        plus pr√©visible et plus facile √† d√©boguer. Il utilise √©galement un DOM virtuel pour 
        optimiser les performances en minimisant les manipulations directes du DOM.
        
        Next.js est un framework construit sur React qui ajoute des fonctionnalit√©s comme 
        le rendu c√¥t√© serveur, la g√©n√©ration de sites statiques, et bien plus encore.
        Comprendre React est donc essentiel pour ma√Ætriser Next.js.
      `,
      code: `// Un composant React simple
import React from 'react';

function Salutation({ nom }) {
  return (
    <div>
      <h1>Bonjour, {nom}!</h1>
      <p>Bienvenue dans le monde de React.</p>
    </div>
  );
}

// Utilisation du composant
function App() {
  return (
    <div>
      <Salutation nom="Marie" />
      <Salutation nom="Jean" />
    </div>
  );
}

export default App;`,
      language: "jsx",
    },
    components: {
      title: "Composants et Props",
      icon: "üß©",
      color: "bg-green-500",
      content: `
        Les composants sont les blocs de construction de toute application React.
        Un composant est une fonction ou une classe qui accepte des entr√©es (appel√©es "props") 
        et retourne des √©l√©ments React d√©crivant ce qui doit appara√Ætre √† l'√©cran.
        
        Il existe deux types de composants en React :
        - Composants fonctionnels : des fonctions JavaScript qui acceptent des props et retournent du JSX
        - Composants de classe : des classes ES6 qui √©tendent React.Component
        
        Les props (propri√©t√©s) sont des donn√©es pass√©es d'un composant parent √† un composant enfant.
        Elles sont en lecture seule et ne doivent pas √™tre modifi√©es par le composant qui les re√ßoit.
      `,
      code: `// Composant fonctionnel avec props
function Bouton({ texte, couleur, onClick }) {
  return (
    <button 
      onClick={onClick}
      style={{ backgroundColor: couleur, color: 'white', padding: '10px 15px' }}
    >
      {texte}
    </button>
  );
}

// Utilisation du composant avec diff√©rentes props
function App() {
  const handleClick = (message) => {
    alert(message);
  };
  
  return (
    <div>
      <Bouton 
        texte="Cliquez-moi" 
        couleur="blue" 
        onClick={() => handleClick("Bouton bleu cliqu√©!")} 
      />
      
      <Bouton 
        texte="Envoyer" 
        couleur="green" 
        onClick={() => handleClick("Formulaire envoy√©!")} 
      />
      
      <Bouton 
        texte="Supprimer" 
        couleur="red" 
        onClick={() => handleClick("√âl√©ment supprim√©!")} 
      />
    </div>
  );
}`,
      language: "jsx",
    },
    state: {
      title: "√âtat (State) et Cycle de vie",
      icon: "‚è≥",
      color: "bg-red-500",
      content: `
        L'√©tat (state) est un objet qui contient des donn√©es sp√©cifiques √† un composant 
        et qui peuvent changer au fil du temps. Contrairement aux props, l'√©tat est g√©r√© 
        enti√®rement par le composant lui-m√™me.
        
        Dans les composants fonctionnels, l'√©tat est g√©r√© avec le hook useState.
        Dans les composants de classe, l'√©tat est initialis√© dans le constructeur et 
        mis √† jour avec la m√©thode setState.
        
        Le cycle de vie d'un composant comprend plusieurs phases :
        - Montage : le composant est cr√©√© et ins√©r√© dans le DOM
        - Mise √† jour : le composant est re-rendu suite √† des changements de props ou d'√©tat
        - D√©montage : le composant est retir√© du DOM
        
        Dans les composants fonctionnels, le hook useEffect permet de g√©rer ces phases.
      `,
      code: `// Gestion de l'√©tat avec useState
import React, { useState } from 'react';

function Compteur() {
  // D√©clarer une variable d'√©tat "compteur" initialis√©e √† 0
  const [compteur, setCompteur] = useState(0);
  
  return (
    <div>
      <p>Vous avez cliqu√© {compteur} fois</p>
      <button onClick={() => setCompteur(compteur + 1)}>
        Cliquez-moi
      </button>
    </div>
  );
}

// Gestion du cycle de vie avec useEffect
import React, { useState, useEffect } from 'react';

function Horloge() {
  const [date, setDate] = useState(new Date());
  
  useEffect(() => {
    // Code ex√©cut√© apr√®s le rendu (√©quivalent √† componentDidMount et componentDidUpdate)
    const timerID = setInterval(() => {
      setDate(new Date());
    }, 1000);
    
    // Fonction de nettoyage (√©quivalent √† componentWillUnmount)
    return () => {
      clearInterval(timerID);
    };
  }, []); // Le tableau vide signifie que cet effet s'ex√©cute une seule fois apr√®s le montage
  
  return (
    <div>
      <h2>Il est {date.toLocaleTimeString()}.</h2>
    </div>
  );
}`,
      language: "jsx",
    },
    hooks: {
      title: "Hooks React",
      icon: "üîß",
      color: "bg-purple-500",
      content: `
        Les Hooks sont une addition √† React 16.8 qui permettent d'utiliser l'√©tat et d'autres 
        fonctionnalit√©s de React sans √©crire de classe. Ils permettent de r√©utiliser la logique 
        d'√©tat entre les composants.
        
        Les Hooks les plus couramment utilis√©s sont :
        
        - useState : pour ajouter un √©tat local √† un composant fonctionnel
        - useEffect : pour ex√©cuter du code apr√®s le rendu (effets secondaires)
        - useContext : pour acc√©der √† un contexte React
        - useReducer : pour g√©rer un √©tat plus complexe avec un pattern Redux-like
        - useCallback : pour m√©moriser une fonction entre les rendus
        - useMemo : pour m√©moriser une valeur calcul√©e entre les rendus
        - useRef : pour cr√©er une r√©f√©rence mutable qui persiste entre les rendus
        
        Les Hooks personnalis√©s permettent d'extraire la logique des composants dans des fonctions 
        r√©utilisables.
      `,
      code: `// Exemple de plusieurs hooks
import React, { useState, useEffect, useRef } from 'react';

function FormulaireProfil() {
  // useState pour g√©rer les donn√©es du formulaire
  const [profil, setProfil] = useState({
    nom: '',
    email: '',
    bio: ''
  });
  
  // useRef pour acc√©der √† un √©l√©ment DOM
  const inputNomRef = useRef(null);
  
  // useEffect pour focus sur l'input au chargement
  useEffect(() => {
    inputNomRef.current.focus();
  }, []);
  
  // useEffect pour sauvegarder dans localStorage
  useEffect(() => {
    localStorage.setItem('profil', JSON.stringify(profil));
  }, [profil]); // Se d√©clenche uniquement quand profil change
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setProfil(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    alert(\`Profil sauvegard√©: \${profil.nom} (\${profil.email})\`);
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="nom">Nom:</label>
        <input
          id="nom"
          name="nom"
          ref={inputNomRef}
          value={profil.nom}
          onChange={handleChange}
        />
      </div>
      
      <div>
        <label htmlFor="email">Email:</label>
        <input
          id="email"
          name="email"
          type="email"
          value={profil.email}
          onChange={handleChange}
        />
      </div>
      
      <div>
        <label htmlFor="bio">Bio:</label>
        <textarea
          id="bio"
          name="bio"
          value={profil.bio}
          onChange={handleChange}
        />
      </div>
      
      <button type="submit">Sauvegarder</button>
    </form>
  );
}

// Hook personnalis√©
function useLocalStorage(key, initialValue) {
  // √âtat pour stocker notre valeur
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.log(error);
      return initialValue;
    }
  });
  
  // Fonction pour mettre √† jour l'√©tat et localStorage
  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.log(error);
    }
  };
  
  return [storedValue, setValue];
}`,
      language: "jsx",
    },
    lists: {
      title: "Listes et Cl√©s",
      icon: "üìã",
      color: "bg-yellow-500",
      content: `
        En React, vous transformerez souvent des tableaux en listes d'√©l√©ments.
        
        Pour cr√©er une liste d'√©l√©ments, vous pouvez utiliser la m√©thode map() pour 
        transformer chaque √©l√©ment du tableau en un √©l√©ment React.
        
        Lorsque vous cr√©ez une liste d'√©l√©ments, vous devez inclure une "cl√©" (key) sp√©ciale.
        Les cl√©s aident React √† identifier quels √©l√©ments ont chang√©, ont √©t√© ajout√©s ou supprim√©s.
        Les cl√©s doivent √™tre uniques parmi les fr√®res (mais peuvent √™tre r√©utilis√©es globalement).
        
        Id√©alement, les cl√©s devraient √™tre des identifiants stables (comme des IDs de base de donn√©es),
        mais vous pouvez utiliser l'index du tableau comme cl√© en dernier recours.
      `,
      code: `// Rendu d'une liste avec des cl√©s
function ListeUtilisateurs({ utilisateurs }) {
  return (
    <ul>
      {utilisateurs.map((utilisateur) => (
        <li key={utilisateur.id}>
          {utilisateur.nom} ({utilisateur.email})
        </li>
      ))}
    </ul>
  );
}

// Exemple d'utilisation
function App() {
  const utilisateurs = [
    { id: 1, nom: 'Alice Dupont', email: 'alice@example.com' },
    { id: 2, nom: 'Bob Martin', email: 'bob@example.com' },
    { id: 3, nom: 'Charlie Durand', email: 'charlie@example.com' }
  ];
  
  return (
    <div>
      <h1>Liste des utilisateurs</h1>
      <ListeUtilisateurs utilisateurs={utilisateurs} />
    </div>
  );
}

// Liste avec filtrage et tri
function ListeFiltrable({ items }) {
  const [recherche, setRecherche] = useState('');
  const [tri, setTri] = useState('nom'); // 'nom' ou 'date'
  
  // Filtrer les items en fonction de la recherche
  const itemsFiltres = items.filter(item =>
    item.nom.toLowerCase().includes(recherche.toLowerCase())
  );
  
  // Trier les items
  const itemsTries = [...itemsFiltres].sort((a, b) => {
    if (tri === 'date') {
      return new Date(b.date) - new Date(a.date);
    }
    return a.nom.localeCompare(b.nom);
  });
  
  return (
    <div>
      <div>
        <input
          type="text"
          placeholder="Rechercher..."
          value={recherche}
          onChange={(e) => setRecherche(e.target.value)}
        />
        
        <select value={tri} onChange={(e) => setTri(e.target.value)}>
          <option value="nom">Trier par nom</option>
          <option value="date">Trier par date</option>
        </select>
      </div>
      
      <ul>
        {itemsTries.map(item => (
          <li key={item.id}>
            {item.nom} - {new Date(item.date).toLocaleDateString()}
          </li>
        ))}
      </ul>
    </div>
  );
}`,
      language: "jsx",
    },
    forms: {
      title: "Formulaires et √âv√©nements",
      icon: "üìÖ",
      color: "bg-pink-500",
      content: `
        En React, les formulaires fonctionnent un peu diff√©remment du HTML standard.
        
        Dans un formulaire React, vous pouvez :
        - Utiliser des "composants contr√¥l√©s" o√π l'√©tat React est la "source unique de v√©rit√©"
        - G√©rer la soumission du formulaire avec onSubmit
        - G√©rer les changements d'entr√©e avec onChange
        
        Les √©v√©nements en React sont similaires aux √©v√©nements du DOM, mais avec quelques diff√©rences :
        - Les √©v√©nements React sont nomm√©s en camelCase (onClick au lieu de onclick)
        - Avec JSX, vous passez une fonction comme gestionnaire d'√©v√©nements, pas une cha√Æne de caract√®res
        - Vous devez appeler preventDefault() explicitement pour emp√™cher le comportement par d√©faut
        
        La gestion des formulaires est une comp√©tence essentielle pour cr√©er des applications interactives.
      `,
      code: `// Formulaire contr√¥l√© simple
import React, { useState } from 'react';

function FormulaireContact() {
  const [formData, setFormData] = useState({
    nom: '',
    email: '',
    message: ''
  });
  const [soumis, setSoumis] = useState(false);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault(); // Emp√™che le rechargement de la page
    
    // Validation simple
    if (!formData.nom || !formData.email || !formData.message) {
      alert('Veuillez remplir tous les champs');
      return;
    }
    
    // Simuler l'envoi √† un serveur
    console.log('Donn√©es du formulaire:', formData);
    setSoumis(true);
  };
  
  if (soumis) {
    return (
      <div>
        <h2>Merci pour votre message!</h2>
        <p>Nous vous r√©pondrons bient√¥t √† {formData.email}.</p>
        <button onClick={() => {
          setFormData({ nom: '', email: '', message: '' });
          setSoumis(false);
        }}>
          Envoyer un autre message
        </button>
      </div>
    );
  }
  
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="nom">Nom:</label>
        <input
          id="nom"
          name="nom"
          value={formData.nom}
          onChange={handleChange}
          required
        />
      </div>
      
      <div>
        <label htmlFor="email">Email:</label>
        <input
          id="email"
          name="email"
          type="email"
          value={formData.email}
          onChange={handleChange}
          required
        />
      </div>
      
      <div>
        <label htmlFor="message">Message:</label>
        <textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          required
          rows="5"
        />
      </div>
      
      <button type="submit">Envoyer</button>
    </form>
  );
}`,
      language: "jsx",
    },
    context: {
      title: "Context API",
      icon: "üåê",
      color: "bg-teal-500",
      content: `
        Le Context API de React permet de partager des donn√©es entre des composants sans avoir 
        √† passer explicitement les props √† chaque niveau.
        
        Il est particuli√®rement utile pour des donn√©es qui peuvent √™tre consid√©r√©es comme "globales" 
        pour un arbre de composants React, comme le th√®me actuel, l'utilisateur authentifi√©, 
        ou les pr√©f√©rences de langue.
        
        Le Context API se compose de trois parties principales :
        - React.createContext : cr√©e un objet Context
        - Context.Provider : fournit la valeur du contexte aux composants enfants
        - Context.Consumer ou useContext : consomme la valeur du contexte
        
        Dans Next.js, le Context API est souvent utilis√© pour g√©rer l'√©tat global de l'application.
      `,
      code: `// Cr√©ation et utilisation d'un contexte
import React, { createContext, useContext, useState } from 'react';

// Cr√©er un contexte avec une valeur par d√©faut
const ThemeContext = createContext({
  theme: 'light',
  toggleTheme: () => {}
});

// Hook personnalis√© pour utiliser le contexte de th√®me
function useTheme() {
  return useContext(ThemeContext);
}

// Composant Provider qui fournit le contexte
function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
  };
  
  const value = {
    theme,
    toggleTheme
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

// Composant qui utilise le contexte
function ThemedButton() {
  const { theme, toggleTheme } = useTheme();
  
  return (
    <button
      onClick={toggleTheme}
      style={{
        backgroundColor: theme === 'light' ? '#ffffff' : '#333333',
        color: theme === 'light' ? '#333333' : '#ffffff',
        padding: '10px 15px',
        border: '1px solid #cccccc',
        borderRadius: '4px'
      }}
    >
      Changer le th√®me ({theme})
    </button>
  );
}

// Composant qui utilise le composant avec contexte
function Toolbar() {
  return (
    <div>
      <ThemedButton />
    </div>
  );
}

// Application compl√®te avec le Provider
function App() {
  return (
    <ThemeProvider>
      <div style={{ padding: '20px' }}>
        <h1>Exemple de Context API</h1>
        <Toolbar />
      </div>
    </ThemeProvider>
  );
}`,
      language: "jsx",
    },
    exercise: {
      title: "Exercice Pratique",
      icon: "üõ†Ô∏è",
      color: "bg-orange-500",
      content: `
        Maintenant que vous avez appris les bases de React, essayez de r√©soudre cet exercice pratique.
        
        L'objectif est de cr√©er un composant de compteur qui :
        1. Affiche un nombre
        2. A un bouton pour incr√©menter le nombre
        3. A un bouton pour d√©cr√©menter le nombre
        4. Ne permet pas au nombre de devenir n√©gatif
        
        Utilisez useState pour g√©rer l'√©tat du compteur et cr√©ez des gestionnaires d'√©v√©nements 
        pour les boutons d'incr√©mentation et de d√©cr√©mentation.
        
        Cet exercice vous aidera √† consolider votre compr√©hension des composants, des props, 
        de l'√©tat et des √©v√©nements en React.
      `,
      exercise: true,
      initialCode: `function Compteur() {
  // Utilisez useState pour cr√©er une variable d'√©tat "count" initialis√©e √† 0
  
  // Cr√©ez une fonction pour incr√©menter le compteur
  
  // Cr√©ez une fonction pour d√©cr√©menter le compteur
  // (assurez-vous que le compteur ne devient pas n√©gatif)
  
  return (
    <div>
      {/* Affichez le compteur ici */}
      
      {/* Ajoutez un bouton pour incr√©menter */}
      
      {/* Ajoutez un bouton pour d√©cr√©menter */}
    </div>
  );
}

// Exemple d'utilisation du composant
function App() {
  return (
    <div>
      <h1>Mon Compteur</h1>
      <Compteur />
    </div>
  );
}`,
      solutionCode: `function Compteur() {
  // Utilisez useState pour cr√©er une variable d'√©tat "count" initialis√©e √† 0
  const [count, setCount] = useState(0);
  
  // Cr√©ez une fonction pour incr√©menter le compteur
  const increment = () => {
    setCount(count + 1);
  };
  
  // Cr√©ez une fonction pour d√©cr√©menter le compteur
  // (assurez-vous que le compteur ne devient pas n√©gatif)
  const decrement = () => {
    if (count > 0) {
      setCount(count - 1);
    }
  };
  
  return (
    <div>
      {/* Affichez le compteur ici */}
      <p>Compteur: {count}</p>
      
      {/* Ajoutez un bouton pour incr√©menter */}
      <button onClick={increment}>Incr√©menter</button>
      
      {/* Ajoutez un bouton pour d√©cr√©menter */}
      <button onClick={decrement}>D√©cr√©menter</button>
    </div>
  );
}

// Exemple d'utilisation du composant
function App() {
  return (
    <div>
      <h1>Mon Compteur</h1>
      <Compteur />
    </div>
  );
}`,
      language: "jsx",
    },
    playground: {
      title: "Playground React",
      icon: "‚öôÔ∏è",
      color: "bg-gray-500",
      content: `
        Utilisez ce playground pour exp√©rimenter avec React. 
        √âcrivez votre code JSX dans l'√©diteur et voyez le r√©sultat en temps r√©el.
        
        Vous pouvez cr√©er des composants, utiliser des hooks, et tester diff√©rentes fonctionnalit√©s de React.
        
        N'h√©sitez pas √† essayer les exemples des sections pr√©c√©dentes ou √† cr√©er vos propres exemples.
        
        C'est un excellent moyen de vous familiariser avec React avant de passer √† Next.js.
      `,
      playground: true,
      initialCode: `// √âcrivez votre code React ici
function Salutation({ nom }) {
  return <h1>Bonjour, {nom}!</h1>;
}

function ListeElements({ items }) {
  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
}

function MonApp() {
  const [nom, setNom] = React.useState("Visiteur");
  const [items, setItems] = React.useState([
    "Apprendre React", 
    "Cr√©er des composants", 
    "Utiliser des hooks"
  ]);
  
  const ajouterItem = () => {
    setItems([...items, "Nouvel √©l√©ment " + (items.length + 1)]);
  };
  
  return (
    <div>
      <Salutation nom={nom} />
      
      <div>
        <label>
          Votre nom: 
          <input 
            value={nom} 
            onChange={(e) => setNom(e.target.value)} 
          />
        </label>
      </div>
      
      <h2>Ma liste de t√¢ches:</h2>
      <ListeElements items={items} />
      
      <button onClick={ajouterItem}>
        Ajouter un √©l√©ment
      </button>
    </div>
  );
}

// Rendu de l'application
ReactDOM.render(
  <MonApp />,
  document.getElementById('root')
);`,
      language: "jsx",
    },
  };

  const totalSections = Object.keys(sections).length;
  const completedSections = Object.values(progress).filter(Boolean).length;
  const progressPercentage = Math.round((completedSections / totalSections) * 100);

  const handleSectionChange = (section) => {
    setActiveSection(section);
    setShowMobileMenu(false);
    // Auto-scroll to top when changing sections
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const renderSectionContent = () => {
    const section = sections[activeSection];

    return (
      <motion.div
        key={activeSection}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
        className="mt-6"
      >
        <div className="flex items-center space-x-3 mb-4">
          <div className={`w-10 h-10 ${section.color} rounded-lg flex items-center justify-center text-white shadow-lg`}>
            <span className="text-xl">{section.icon}</span>
          </div>
          <h2 className="text-2xl font-bold text-gray-900">
            {section.title}
          </h2>
        </div>
        
        <div className="prose max-w-none mb-8 bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          {section.content.split("\n").map((paragraph, index) => (
            <p key={index} className="mb-4 text-gray-700">
              {paragraph}
            </p>
          ))}
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 mb-8">
          {section.playground ? (
            <CodePlayground
              initialCode={section.initialCode}
              language={section.language}
              title="Playground React"
              description="Exp√©rimentez avec React et voyez le r√©sultat en temps r√©el."
              height="500px"
            />
          ) : section.exercise ? (
            <ExerciseWithPreview
              exercise={{
                id: 1,
                title: "Cr√©er un composant de compteur",
                description:
                  "Cr√©ez un composant de compteur React qui permet d'incr√©menter et de d√©cr√©menter un nombre.",
                instructions: [
                  "Utilisez useState pour cr√©er une variable d'√©tat 'count' initialis√©e √† 0",
                  "Cr√©ez une fonction pour incr√©menter le compteur",
                  "Cr√©ez une fonction pour d√©cr√©menter le compteur (sans aller en dessous de 0)",
                  "Affichez le compteur et ajoutez des boutons pour incr√©menter et d√©cr√©menter",
                ],
                initialCode: section.initialCode,
                solutionCode: section.solutionCode,
                language: section.language,
                difficulty: "d√©butant",
                xpReward: 30,
              }}
            />
          ) : (
            <CodeEditor
              initialCode={section.code}
              language={section.language}
              height="350px"
              showPreview={true}
              autoPreview={true}
            />
          )}
        </div>

        <div className="flex justify-between items-center mt-8 mb-12">
          <button 
            onClick={() => {
              const sectionKeys = Object.keys(sections);
              const currentIndex = sectionKeys.indexOf(activeSection);
              if (currentIndex > 0) {
                handleSectionChange(sectionKeys[currentIndex - 1]);
              }
            }}
            disabled={activeSection === Object.keys(sections)[0]}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg border ${
              activeSection === Object.keys(sections)[0]
                ? 'text-gray-400 border-gray-200 cursor-not-allowed'
                : 'text-indigo-600 border-indigo-200 hover:bg-indigo-50'
            } transition-colors`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
            <span>Section pr√©c√©dente</span>
          </button>

          <button
            onClick={() => markAsCompleted(activeSection)}
            className={`px-4 py-2 rounded-lg ${
              progress[activeSection]
                ? 'bg-green-100 text-green-700 border border-green-200'
                : 'bg-indigo-600 text-white hover:bg-indigo-700'
            } transition-colors flex items-center space-x-2`}
          >
            {progress[activeSection] ? (
              <>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span>Section compl√©t√©e</span>
              </>
            ) : (
              <>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>Marquer comme compl√©t√©</span>
              </>
            )}
          </button>

          <button 
            onClick={() => {
              const sectionKeys = Object.keys(sections);
              const currentIndex = sectionKeys.indexOf(activeSection);
              if (currentIndex < sectionKeys.length - 1) {
                handleSectionChange(sectionKeys[currentIndex + 1]);
              }
            }}
            disabled={activeSection === Object.keys(sections)[Object.keys(sections).length - 1]}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg border ${
              activeSection === Object.keys(sections)[Object.keys(sections).length - 1]
                ? 'text-gray-400 border-gray-200 cursor-not-allowed'
                : 'text-indigo-600 border-indigo-200 hover:bg-indigo-50'
            } transition-colors`}
          >
            <span>Section suivante</span>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      </motion.div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Barre de navigation sup√©rieure */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-3">
              <Link href="/lessons" className="text-indigo-600 hover:text-indigo-800">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
              </Link>
              <h1 className="text-xl font-bold text-gray-900">Fondamentaux React</h1>
            </div>
            
            <div className="hidden md:flex items-center space-x-4">
              <div className="w-48 bg-gray-200 rounded-full h-2.5 overflow-hidden">
                <div 
                  className="bg-gradient-to-r from-indigo-500 to-purple-600 h-2.5 rounded-full" 
                  style={{ width: `${progressPercentage}%` }}
                ></div>
              </div>
              <span className="text-sm font-medium text-gray-700">{progressPercentage}% Compl√©t√©</span>
            </div>
            
            <button 
              className="md:hidden"
              onClick={() => setShowMobileMenu(!showMobileMenu)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
              </svg>
            </button>
          </div>
        </div>
      </header>
      
      {/* Contenu principal avec sidebar */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="lg:grid lg:grid-cols-12 lg:gap-8">
          {/* Sidebar pour desktop */}
          <aside className="hidden lg:block lg:col-span-3">
            <div className="sticky top-6">
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h2 className="font-semibold text-gray-900 mb-4">Modules du cours</h2>
                <nav className="space-y-1">
                  {Object.entries(sections).map(([key, section], index) => (
                    <button
                      key={key}
                      onClick={() => handleSectionChange(key)}
                      className={`flex items-center w-full px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                        activeSection === key
                          ? "bg-indigo-50 text-indigo-700"
                          : "text-gray-700 hover:bg-gray-100"
                      }`}
                    >
                      <div className="flex items-center justify-center w-6 h-6 mr-3">
                        {progress[key] ? (
                          <div className="w-6 h-6 bg-green-100 text-green-700 rounded-full flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          </div>
                        ) : (
                          <div className={`w-6 h-6 rounded-full flex items-center justify-center ${activeSection === key ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-500'}`}>
                            {index + 1}
                          </div>
                        )}
                      </div>
                      <span className="truncate">{section.title}</span>
                    </button>
                  ))}
                </nav>
              </div>
              
              <div className="mt-6 bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h2 className="font-semibold text-gray-900 mb-3">Votre progression</h2>
                <div className="mb-3">
                  <div className="flex justify-between text-sm text-gray-600 mb-1">
                    <span>Compl√©t√©</span>
                    <span>{completedSections}/{totalSections} sections</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5 overflow-hidden">
                    <div 
                      className="bg-gradient-to-r from-indigo-500 to-purple-600 h-2.5 rounded-full" 
                      style={{ width: `${progressPercentage}%` }}
                    ></div>
                  </div>
                </div>
                {completedSections === totalSections ? (
                  <div className="text-center py-3 bg-green-50 text-green-700 rounded-lg">
                    <span className="font-medium">Cours termin√©! üéâ</span>
                  </div>
                ) : (
                  <p className="text-sm text-gray-600">
                    Continuez √† apprendre pour compl√©ter ce cours sur React.
                  </p>
                )}
              </div>
              
              <div className="mt-6 bg-indigo-50 rounded-xl shadow-sm border border-indigo-100 p-6">
                <h3 className="font-medium text-indigo-800 mb-2">Besoin d'aide?</h3>
                <p className="text-sm text-indigo-700 mb-4">
                  Si vous avez des questions sur React, n'h√©sitez pas √† consulter la documentation officielle ou √† demander de l'aide.
                </p>
                <a 
                  href="https://fr.reactjs.org/docs/getting-started.html" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-xs bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-3 rounded-lg inline-block transition-colors"
                >
                  Documentation React
                </a>
              </div>
            </div>
          </aside>
          
          {/* Menu mobile */}
          <AnimatePresence>
            {showMobileMenu && (
              <motion.div 
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
                className="lg:hidden fixed inset-0 z-50 bg-gray-900 bg-opacity-50"
              >
                <div className="bg-white p-6 h-auto max-h-[90vh] overflow-y-auto rounded-b-xl">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="font-semibold text-gray-900">Modules du cours</h2>
                    <button onClick={() => setShowMobileMenu(false)}>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                  
                  <div className="mb-4">
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Progression</span>
                      <span>{progressPercentage}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2.5 overflow-hidden">
                      <div 
                        className="bg-gradient-to-r from-indigo-500 to-purple-600 h-2.5 rounded-full" 
                        style={{ width: `${progressPercentage}%` }}
                      ></div>
                    </div>
                  </div>
                  
                  <nav className="space-y-1">
                    {Object.entries(sections).map(([key, section], index) => (
                      <button
                        key={key}
                        onClick={() => handleSectionChange(key)}
                        className={`flex items-center w-full px-3 py-3 text-sm font-medium rounded-lg transition-colors ${
                          activeSection === key
                            ? "bg-indigo-50 text-indigo-700"
                            : "text-gray-700 hover:bg-gray-100"
                        }`}
                      >
                        <div className="flex items-center justify-center w-6 h-6 mr-3">
                          {progress[key] ? (
                            <div className="w-6 h-6 bg-green-100 text-green-700 rounded-full flex items-center justify-center">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                            </div>
                          ) : (
                            <div className={`w-6 h-6 rounded-full flex items-center justify-center ${activeSection === key ? 'bg-indigo-100 text-indigo-700' : 'bg-gray-100 text-gray-500'}`}>
                              {index + 1}
                            </div>
                          )}
                        </div>
                        <span className="truncate">{section.title}</span>
                      </button>
                    ))}
                  </nav>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
          
          {/* Contenu principal */}
          <main className="lg:col-span-9">
            <motion.div
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              className="space-y-8"
            >
              <AnimatePresence mode="wait">
                {renderSectionContent()}
              </AnimatePresence>
            </motion.div>
          </main>
        </div>
      </div>
    </div>
  );
}
