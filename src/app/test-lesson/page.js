'use client';

import { useState } from 'react';
import { ThemeProvider } from 'next-themes';
import { GamificationProvider, UserStatsDisplay } from '@/components/gamification/GamificationSystemImproved';
import LessonLayoutImproved from '@/components/lessons/LessonLayoutImproved';
import CodeEditorImproved from '@/components/editor/CodeEditorImproved';
import ExerciseComponentImproved from '@/components/lessons/ExerciseComponentImproved';

// Donn√©es de test
const testLesson = {
  id: 'test-1',
  title: 'Test des composants am√©lior√©s',
  description: 'Une le√ßon de d√©monstration pour tester tous les nouveaux composants.',
  difficulty: 'easy',
  duration: '10 min',
  tags: ['Test', 'Demo'],
  prerequisites: [],
  
  steps: [
    {
      id: 'theory-test',
      type: 'theory',
      title: 'Th√©orie de test',
      content: (
        <div className="space-y-6">
          <h2 className="text-2xl font-bold mb-4">Composants am√©lior√©s</h2>
          <p className="text-lg mb-4">
            Cette page de test d√©montre tous les composants am√©lior√©s du projet Mimo clone.
          </p>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
              <h3 className="text-lg font-semibold mb-2 text-blue-800 dark:text-blue-200">
                üéØ √âditeur de code
              </h3>
              <ul className="space-y-1 text-sm">
                <li>‚Ä¢ Coloration syntaxique am√©lior√©e</li>
                <li>‚Ä¢ Interface responsive</li>
                <li>‚Ä¢ Mode plein √©cran</li>
                <li>‚Ä¢ Ajustement de la taille de police</li>
              </ul>
            </div>
            
            <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
              <h3 className="text-lg font-semibold mb-2 text-green-800 dark:text-green-200">
                üèÜ Gamification
              </h3>
              <ul className="space-y-1 text-sm">
                <li>‚Ä¢ Syst√®me XP et niveaux</li>
                <li>‚Ä¢ Badges et achievements</li>
                <li>‚Ä¢ Notifications anim√©es</li>
                <li>‚Ä¢ Suivi de progression</li>
              </ul>
            </div>
          </div>
        </div>
      ),
      hint: "Cette section pr√©sente les am√©liorations apport√©es aux composants."
    },
    
    {
      id: 'exercise-test',
      type: 'exercise',
      title: 'Test de l\'√©diteur de code',
      description: 'Testez l\'√©diteur de code am√©lior√© avec cet exercice simple.',
      language: 'javascript',
      initialCode: `// Test de l'√©diteur de code am√©lior√©
console.log("Hello, Mimo Clone!");

// Cr√©ez une fonction qui calcule la somme de deux nombres
function addNumbers(a, b) {
  // Votre code ici
  return a + b;
}

// Testez votre fonction
console.log("5 + 3 =", addNumbers(5, 3));
console.log("10 + 7 =", addNumbers(10, 7));`,
      solution: `// Test de l'√©diteur de code am√©lior√©
console.log("Hello, Mimo Clone!");

// Cr√©ez une fonction qui calcule la somme de deux nombres
function addNumbers(a, b) {
  return a + b;
}

// Testez votre fonction
console.log("5 + 3 =", addNumbers(5, 3));
console.log("10 + 7 =", addNumbers(10, 7));`,
      hint: "La fonction addNumbers doit simplement retourner la somme de a et b."
    },
    
    {
      id: 'quiz-test',
      type: 'quiz',
      title: 'Quiz de test',
      description: 'Testez le composant de quiz am√©lior√©.',
      options: [
        { 
          id: 1, 
          text: 'L\'√©diteur de code supporte la coloration syntaxique', 
          correct: true,
          explanation: 'Correct ! L\'√©diteur utilise Prism.js pour la coloration syntaxique.'
        },
        { 
          id: 2, 
          text: 'Le syst√®me de gamification inclut des badges', 
          correct: true,
          explanation: 'Exact ! Les utilisateurs peuvent gagner des badges pour leurs accomplissements.'
        },
        { 
          id: 3, 
          text: 'L\'interface n\'est pas responsive', 
          correct: false,
          explanation: 'Faux. L\'interface a √©t√© enti√®rement repens√©e pour √™tre responsive.'
        },
        { 
          id: 4, 
          text: 'Les le√ßons sont structur√©es en √©tapes', 
          correct: true,
          explanation: 'Correct ! Chaque le√ßon est divis√©e en √©tapes (th√©orie, exercices, quiz).'
        }
      ],
      type: 'multiple',
      explanation: `
        Les am√©liorations apport√©es incluent :
        - √âditeur de code avec coloration syntaxique et interface responsive
        - Syst√®me de gamification complet avec XP, niveaux et badges
        - Interface utilisateur harmonieuse et responsive
        - Le√ßons structur√©es en √©tapes progressives
      `,
      maxAttempts: 3
    }
  ],
  
  metadata: {
    estimatedTime: 10,
    xpReward: 100,
    badges: ['tester', 'explorer'],
    nextLesson: null,
    previousLesson: null
  }
};

const testExercise = {
  id: 'standalone-test',
  title: 'Test du composant d\'exercice',
  description: 'S√©lectionnez les bonnes r√©ponses pour tester le composant d\'exercice am√©lior√©.',
  type: 'multiple',
  difficulty: 'easy',
  maxAttempts: 3,
  options: [
    { 
      id: 1, 
      text: 'React est une biblioth√®que JavaScript', 
      correct: true,
      description: 'Pour cr√©er des interfaces utilisateur'
    },
    { 
      id: 2, 
      text: 'Next.js est un framework React', 
      correct: true,
      description: 'Qui ajoute des fonctionnalit√©s comme le SSR'
    },
    { 
      id: 3, 
      text: 'JavaScript est un langage de programmation', 
      correct: true,
      description: 'Principalement utilis√© pour le web'
    },
    { 
      id: 4, 
      text: 'HTML est un langage de programmation', 
      correct: false,
      description: 'HTML est un langage de balisage, pas de programmation'
    }
  ],
  explanation: `
    React est effectivement une biblioth√®que JavaScript pour cr√©er des interfaces utilisateur.
    Next.js est un framework qui s'appuie sur React pour ajouter des fonctionnalit√©s avanc√©es.
    JavaScript est un langage de programmation, tandis que HTML est un langage de balisage.
  `
};

export default function TestLessonPage() {
  const [currentTest, setCurrentTest] = useState('lesson');
  const [theme, setTheme] = useState('light');
  
  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };
  
  return (
    <ThemeProvider attribute="class" defaultTheme={theme} forcedTheme={theme}>
      <GamificationProvider>
        <div className={`min-h-screen ${theme === 'dark' ? 'dark' : ''}`}>
          <div className="bg-gray-50 dark:bg-gray-900 min-h-screen">
            {/* Header de test */}
            <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4">
              <div className="max-w-7xl mx-auto flex items-center justify-between">
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                  Test des composants am√©lior√©s
                </h1>
                
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => setCurrentTest('lesson')}
                      className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                        currentTest === 'lesson'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                      }`}
                    >
                      Le√ßon compl√®te
                    </button>
                    
                    <button
                      onClick={() => setCurrentTest('editor')}
                      className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                        currentTest === 'editor'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                      }`}
                    >
                      √âditeur seul
                    </button>
                    
                    <button
                      onClick={() => setCurrentTest('exercise')}
                      className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                        currentTest === 'exercise'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                      }`}
                    >
                      Exercice seul
                    </button>
                    
                    <button
                      onClick={() => setCurrentTest('stats')}
                      className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                        currentTest === 'stats'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                      }`}
                    >
                      Stats
                    </button>
                  </div>
                  
                  <button
                    onClick={toggleTheme}
                    className="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                  >
                    {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
                  </button>
                </div>
              </div>
            </div>
            
            {/* Contenu de test */}
            <div className="flex-1">
              {currentTest === 'lesson' && (
                <LessonLayoutImproved
                  lesson={testLesson}
                  theme={theme}
                  progress={33}
                  onComplete={() => console.log('Le√ßon termin√©e!')}
                />
              )}
              
              {currentTest === 'editor' && (
                <div className="p-6">
                  <div className="max-w-6xl mx-auto">
                    <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">
                      Test de l'√©diteur de code am√©lior√©
                    </h2>
                    <div className="h-96">
                      <CodeEditorImproved
                        initialCode={`// √âditeur de code am√©lior√©
console.log("Hello, World!");

function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// Calculer les 10 premiers nombres de Fibonacci
for (let i = 0; i < 10; i++) {
  console.log(\`F(\${i}) = \${fibonacci(i)}\`);
}`}
                        language="javascript"
                        height="100%"
                        theme={theme}
                        onCodeChange={(code) => console.log('Code chang√©:', code)}
                        onCodeRun={(code) => console.log('Code ex√©cut√©:', code)}
                      />
                    </div>
                  </div>
                </div>
              )}
              
              {currentTest === 'exercise' && (
                <div className="p-6">
                  <div className="max-w-4xl mx-auto">
                    <ExerciseComponentImproved
                      exercise={testExercise}
                      theme={theme}
                      onComplete={() => console.log('Exercice termin√©!')}
                      onProgress={(data) => console.log('Progression:', data)}
                    />
                  </div>
                </div>
              )}
              
              {currentTest === 'stats' && (
                <div className="p-6">
                  <div className="max-w-4xl mx-auto space-y-6">
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                      Test du syst√®me de gamification
                    </h2>
                    
                    <UserStatsDisplay theme={theme} />
                    
                    <div className="mt-6">
                      <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
                        Version compacte
                      </h3>
                      <UserStatsDisplay theme={theme} compact={true} />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </GamificationProvider>
    </ThemeProvider>
  );
}

