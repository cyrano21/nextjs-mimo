export async function GET(request, { params }) {
  const moduleId = params.moduleId;
  const lessonId = params.lessonId;
  
  // Combinaison de l'ID du module et de la leçon pour la recherche
  const lessonKey = `${moduleId}-${lessonId}`;
  
  // Obtenir les données de la leçon en fonction de la clé
  const lesson = getLessonData(lessonKey);
  
  if (!lesson) {
    return new Response(JSON.stringify({ error: "Lesson not found" }), {
      headers: { 'Content-Type': 'application/json' },
      status: 404
    });
  }
  
  return new Response(JSON.stringify(lesson), {
    headers: { 'Content-Type': 'application/json' }
  });
}

// Fonction pour obtenir les données d'une leçon spécifique
function getLessonData(lessonKey) {
  // Données des leçons organisées par module-leçon
  const lessonsData = {
    // Module 1: Fondamentaux Web
    "1-1": {
      title: "Introduction au développement web moderne",
      description: "Vue d'ensemble des technologies web actuelles",
      difficulty: "débutant",
      duration: 30,
      tags: ["HTML", "CSS", "JavaScript", "Web"],
      prerequisites: [],
      content: `
        <h2>Introduction au développement web moderne</h2>
        <p>Le développement web moderne repose sur trois piliers fondamentaux :</p>
        <ul>
          <li><strong>HTML</strong> - Structure du contenu</li>
          <li><strong>CSS</strong> - Présentation et style</li>
          <li><strong>JavaScript</strong> - Interactivité et logique</li>
        </ul>
        <p>Ces trois technologies travaillent ensemble pour créer des sites web dynamiques et interactifs.</p>
      `,
      aiSupport: {
        mentor: "CodeSage",
        features: ["Recommandations personnalisées", "Exemples interactifs"],
        tips: ["N'hésitez pas à me demander des explications sur les concepts", "Je peux vous aider à comprendre l'écosystème web"]
      }
    },
    
    // Module 2-3: JavaScript
    "2-1": {
      title: "Introduction à JavaScript",
      description: "Les bases du langage JavaScript et son rôle dans le développement web",
      difficulty: "débutant",
      duration: 40,
      tags: ["JavaScript", "Programmation", "Web"],
      prerequisites: ["1-1", "1-2"],
      content: `
        <h2>Introduction à JavaScript</h2>
        <p>JavaScript est un langage de programmation qui permet d'ajouter de l'interactivité aux pages web.</p>
        <h3>Caractéristiques principales</h3>
        <ul>
          <li>Langage interprété (pas besoin de compilation)</li>
          <li>Orienté objet avec prototypes</li>
          <li>Syntaxe inspirée de C/Java</li>
          <li>Typé dynamiquement</li>
        </ul>
      `,
      aiSupport: {
        mentor: "CodeSage",
        features: ["Exemples interactifs", "Exercices pratiques"],
        tips: ["N'hésitez pas à expérimenter avec la console JavaScript", "La pratique régulière est la clé pour maîtriser JavaScript"]
      }
    },
    
    "3-1": {
      title: "Programmation asynchrone en JavaScript",
      description: "Comprendre les promesses, async/await et les callbacks",
      difficulty: "intermédiaire",
      duration: 55,
      tags: ["JavaScript", "Asynchrone", "Promesses", "Async/Await"],
      prerequisites: ["2-1", "2-2", "2-3"],
      content: `
        <h2>Programmation asynchrone en JavaScript</h2>
        <p>JavaScript est un langage à thread unique qui utilise un modèle asynchrone pour gérer les opérations qui prennent du temps.</p>
        
        <h3>Callbacks</h3>
        <pre><code>function fetchData(callback) {
  setTimeout(() => {
    const data = { name: "John", age: 30 };
    callback(data);
  }, 1000);
}

fetchData((data) => {
  console.log(data); // { name: "John", age: 30 }
});</code></pre>
        
        <h3>Promesses</h3>
        <pre><code>function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = { name: "John", age: 30 };
      resolve(data);
      // En cas d'erreur: reject(new Error("Échec du chargement"))
    }, 1000);
  });
}

fetchData()
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error(error);
  });</code></pre>
      `,
      aiSupport: {
        mentor: "CodeSage",
        features: ["Visualisation du flux asynchrone", "Exemples réels"],
        tips: ["Utilisez async/await pour un code plus lisible", "Pensez toujours à gérer les erreurs avec try/catch"]
      }
    },
    
    // Module 4-5: React
    "4-1": {
      title: "Introduction à React",
      description: "Découvrir les principes fondamentaux de React et son écosystème",
      difficulty: "intermédiaire",
      duration: 45,
      tags: ["React", "JavaScript", "Frontend"],
      prerequisites: ["3-1", "3-2"],
      content: `
        <h2>Introduction à React</h2>
        <p>React est une bibliothèque JavaScript développée par Facebook pour créer des interfaces utilisateur.</p>
        
        <h3>Principes clés</h3>
        <ul>
          <li><strong>Composants</strong>: unités réutilisables de code et d'interface</li>
          <li><strong>DOM virtuel</strong>: représentation en mémoire du DOM pour des performances optimales</li>
          <li><strong>Flux de données unidirectionnel</strong>: les données descendent des parents vers les enfants</li>
          <li><strong>JSX</strong>: syntaxe permettant d'écrire du HTML dans JavaScript</li>
        </ul>
        
        <h3>Premier composant React</h3>
        <pre><code>import React from 'react';

function Welcome(props) {
  return &lt;h1&gt;Bonjour, {props.name}&lt;/h1&gt;;
}

// Utilisation
&lt;Welcome name="Sara" /&gt;</code></pre>
        
        <h3>Mise en place d'un projet</h3>
        <pre><code>// Avec Create React App
npx create-react-app mon-application
cd mon-application
npm start</code></pre>
      `,
      aiSupport: {
        mentor: "ComponentPro",
        features: ["Débogage interactif", "Suggestions de structure"],
        tips: ["Commencez par comprendre les composants fonctionnels", "Pratiquez la décomposition d'interfaces en composants"]
      }
    },
    
    "5-1": {
      title: "Hooks React avancés",
      description: "Maîtriser useReducer, useContext, useCallback et useMemo",
      difficulty: "avancé",
      duration: 60,
      tags: ["React", "Hooks", "useReducer", "useContext"],
      prerequisites: ["4-1", "4-2", "4-3"],
      content: `
        <h2>Hooks React avancés</h2>
        <p>Les hooks avancés permettent de gérer des logiques complexes et d'optimiser les performances.</p>
        
        <h3>useReducer</h3>
        <p>Alternative à useState pour gérer des états complexes :</p>
        <pre><code>import { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    &lt;&gt;
      Count: {state.count}
      &lt;button onClick={() => dispatch({ type: 'increment' })}&gt;+&lt;/button&gt;
      &lt;button onClick={() => dispatch({ type: 'decrement' })}&gt;-&lt;/button&gt;
    &lt;/&gt;
  );
}</code></pre>
      `,
      aiSupport: {
        mentor: "ComponentPro",
        features: ["Exemples interactifs", "Analyses de performance"],
        tips: ["Je peux vous aider à comprendre quand utiliser chaque hook", "Demandez-moi des exemples de refactorisation pour améliorer les performances"]
      }
    },
    
    // Module 6-8: Next.js
    "6-1": {
      title: "Qu'est-ce que Next.js et pourquoi l'utiliser?",
      description: "Introduction, historique et avantages de Next.js par rapport à React",
      difficulty: "intermédiaire",
      duration: 35,
      tags: ["Next.js", "SSR", "SSG", "React"],
      prerequisites: ["5-1", "5-2"],
      content: `
        <h2>Qu'est-ce que Next.js?</h2>
        <p>Next.js est un framework React qui offre des fonctionnalités comme le rendu côté serveur (SSR), la génération de sites statiques (SSG), et bien plus encore.</p>

        <h3>Historique et évolution</h3>
        <p>Next.js a été créé par Vercel (anciennement ZEIT) et est maintenu par une communauté active. Il a été conçu pour résoudre les problèmes courants du développement React, comme le SEO, le routage et le rendu côté serveur.</p>

        <h3>Pourquoi utiliser Next.js?</h3>
        <p>Next.js offre de nombreux avantages :</p>
        <ul>
          <li><strong>Rendu côté serveur (SSR)</strong> : Améliore le SEO et les performances perçues</li>
          <li><strong>Génération de sites statiques (SSG)</strong> : Permet de pré-rendre les pages lors de la compilation</li>
          <li><strong>Routage basé sur le système de fichiers</strong> : Simplifie la navigation dans l'application</li>
          <li><strong>Optimisation automatique</strong> : Images, polices, scripts</li>
          <li><strong>API Routes</strong> : Permet de créer des API dans le même projet</li>
        </ul>
      `,
      aiSupport: {
        mentor: "ServerSideWizard",
        features: ["Comparaison avec d'autres frameworks", "Cas d'usage illustrés"],
        tips: ["Je peux vous aider à comprendre si Next.js est adapté à votre projet", "Demandez-moi des explications détaillées sur les différents modes de rendu"]
      }
    },
    
    "7-1": {
      title: "App Router vs Pages Router",
      description: "Comprendre les deux systèmes de routage de Next.js",
      difficulty: "intermédiaire",
      duration: 30,
      tags: ["Next.js", "Routing", "App Router", "Pages Router"],
      prerequisites: ["6-1", "6-2"],
      content: `
        <h2>Les deux systèmes de routage de Next.js</h2>
        <p>Next.js propose deux systèmes de routage : le Pages Router (traditionnel) et l'App Router (plus récent, introduit dans Next.js 13).</p>

        <h3>Pages Router</h3>
        <p>Le système traditionnel basé sur le dossier <code>/pages</code> :</p>
        <ul>
          <li><code>/pages/index.js</code> → Route <code>/</code></li>
          <li><code>/pages/blog/[slug].js</code> → Routes dynamiques comme <code>/blog/article-1</code></li>
          <li>Utilise <code>getStaticProps</code>, <code>getServerSideProps</code> pour le fetching de données</li>
        </ul>

        <h3>App Router</h3>
        <p>Le nouveau système basé sur le dossier <code>/app</code> :</p>
        <ul>
          <li><code>/app/page.js</code> → Route <code>/</code></li>
          <li><code>/app/blog/[slug]/page.js</code> → Routes dynamiques</li>
          <li>Utilise les Server Components et les composants spéciaux comme <code>layout.js</code>, <code>loading.js</code></li>
          <li>Data fetching avec des fonctions asynchrones directement dans les composants</li>
        </ul>
      `,
      aiSupport: {
        mentor: "ServerSideWizard",
        features: ["Comparaison interactive", "Exemples de migration"],
        tips: ["Je peux vous aider à choisir le bon routeur pour votre projet", "Demandez-moi des conseils pour migrer d'un système à l'autre"]
      }
    }
  };
  
  return lessonsData[lessonKey];
}
