"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import CodeEditor from "@/components/editor/CodeEditor";
import ExerciseComponent from "@/components/lessons/ExerciseComponent";
import QuizComponent from "@/components/lessons/QuizComponent";
import CodePreviewSandbox from "@/components/editor/CodePreviewSandbox";

export default function RenderPropsLesson() {
  const [activeSection, setActiveSection] = useState("theory");
  const [progress, setProgress] = useState(0);
  const [sectionCompleted, setSectionCompleted] = useState({
    theory: false,
    practice: false,
    quiz: false
  });

  // Mettre √† jour la progression
  useEffect(() => {
    const completedCount = Object.values(sectionCompleted).filter(Boolean).length;
    setProgress(Math.round((completedCount / 3) * 100));
  }, [sectionCompleted]);

  // Simuler la compl√©tion d'une section
  const completeSection = (section) => {
    setSectionCompleted(prev => ({
      ...prev,
      [section]: true
    }));
  };

  // Animation variants
  const contentVariants = {
    hidden: { opacity: 0, x: 20 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.3 } },
    exit: { opacity: 0, x: -20, transition: { duration: 0.2 } }
  };

  const renderPropExample = `// Composant qui encapsule la logique de suivi de la souris
function MouseTracker({ render }) {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event) => {
      setPosition({
        x: event.clientX,
        y: event.clientY
      });
    };

    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);

  // Utilise la prop "render" pour d√©terminer quoi afficher
  return render(position);
}

// Utilisation du composant
function App() {
  return (
    <div>
      <h1>D√©placez votre souris sur l'√©cran!</h1>
      <MouseTracker
        render={position => (
          <p>
            La position actuelle de la souris est ({position.x}, {position.y})
          </p>
        )}
      />
    </div>
  );
}`;

  const propsChildrenExample = `// Version avec children au lieu de render prop
function MouseTracker({ children }) {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event) => {
      setPosition({
        x: event.clientX,
        y: event.clientY
      });
    };

    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);

  // Utilise children comme fonction
  return children(position);
}

// Utilisation du composant
function App() {
  return (
    <div>
      <h1>D√©placez votre souris sur l'√©cran!</h1>
      <MouseTracker>
        {position => (
          <p>
            La position actuelle de la souris est ({position.x}, {position.y})
          </p>
        )}
      </MouseTracker>
    </div>
  );
}`;

  const toggleExample = `// Composant Toggle avec Render Prop
function Toggle({ render }) {
  const [on, setOn] = useState(false);

  const toggle = () => setOn(prev => !prev);

  return render({ on, toggle });
}

// Utilisation
function App() {
  return (
    <Toggle
      render={({ on, toggle }) => (
        <div>
          <button onClick={toggle}>
            {on ? 'ON' : 'OFF'}
          </button>
          <p>√âtat actuel: {on ? 'Activ√©' : 'D√©sactiv√©'}</p>
        </div>
      )}
    />
  );
}`;

  const exerciseInitialCode = `// Cr√©ez un composant de liste qui utilise une render prop
// pour personnaliser l'affichage de chaque √©l√©ment

function ListWithRenderProp({ items, renderItem }) {
  // Compl√©tez ce composant

}

// Exemple d'utilisation
function App() {
  const users = [
    { id: 1, name: 'Alice', role: 'Developer' },
    { id: 2, name: 'Bob', role: 'Designer' },
    { id: 3, name: 'Charlie', role: 'Manager' }
  ];

  return (
    <div>
      <h2>Liste des utilisateurs</h2>
      {/* Utilisez votre composant ici */}
    </div>
  );
}`;

  const exerciseSolution = `function ListWithRenderProp({ items, renderItem }) {
  return (
    <ul>
      {items.map(item => (
        <li key={item.id}>
          {renderItem(item)}
        </li>
      ))}
    </ul>
  );
}

function App() {
  const users = [
    { id: 1, name: 'Alice', role: 'Developer' },
    { id: 2, name: 'Bob', role: 'Designer' },
    { id: 3, name: 'Charlie', role: 'Manager' }
  ];

  return (
    <div>
      <h2>Liste des utilisateurs</h2>
      <ListWithRenderProp
        items={users}
        renderItem={user => (
          <div>
            <strong>{user.name}</strong> - {user.role}
          </div>
        )}
      />
    </div>
  );
}`;

  const quizQuestions = [
    {
      id: 1,
      question: "Qu'est-ce qu'une Render Prop dans React?",
      options: [
        "Une prop sp√©ciale qui transforme l'apparence d'un composant",
        "Une prop dont la valeur est une fonction qui retourne un √©l√©ment React",
        "Une prop qui permet de contr√¥ler le cycle de vie d'un composant",
        "Une m√©thode de rendu alternative aux components fonctionnels"
      ],
      correctAnswer: 1,
      explanation: "Une Render Prop est une technique qui consiste √† utiliser une prop dont la valeur est une fonction qui retourne un √©l√©ment React, permettant de partager du code entre composants."
    },
    {
      id: 2,
      question: "Quel est l'avantage principal des Render Props par rapport aux HOC (Higher-Order Components)?",
      options: [
        "Elles sont plus performantes",
        "Elles √©vitent le probl√®me de collision de noms de props",
        "Elles sont plus faciles √† d√©boguer",
        "Toutes les r√©ponses pr√©c√©dentes"
      ],
      correctAnswer: 1,
      explanation: "Un avantage majeur des Render Props est qu'elles √©vitent le probl√®me de collision de noms de props qui peut survenir avec les HOC lorsque plusieurs composants d'ordre sup√©rieur sont utilis√©s ensemble."
    },
    {
      id: 3,
      question: "Comment peut-on impl√©menter une Render Prop en utilisant 'children'?",
      options: [
        "En passant un composant comme enfant direct",
        "En utilisant props.children comme une fonction et en lui passant des donn√©es",
        "En cr√©ant un composant qui retourne props.children",
        "Ce n'est pas possible car children ne peut pas √™tre une fonction"
      ],
      correctAnswer: 1,
      explanation: "On peut impl√©menter une Render Prop en utilisant children comme une fonction: au lieu de <Component render={data => <div>{data}</div>}>, on √©crit <Component>{data => <div>{data}</div>}</Component>."
    },
    {
      id: 4,
      question: "Quelle affirmation est correcte concernant les Render Props?",
      options: [
        "Elles sont obsol√®tes depuis l'introduction des Hooks",
        "Elles sont utiles uniquement pour les composants bas√©s sur les classes",
        "Elles permettent de r√©utiliser la logique de state et de comportement entre composants",
        "Elles ne peuvent pas √™tre combin√©es avec d'autres patterns comme les HOC"
      ],
      correctAnswer: 2,
      explanation: "Les Render Props permettent de r√©utiliser la logique de state et de comportement entre composants. Bien que les Hooks offrent une alternative, les Render Props restent un pattern valide et utile dans certains contextes."
    }
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-3xl font-bold">Render Props</h1>
            <p className="text-gray-600 mt-2">Apprendre √† utiliser le pattern Render Props pour partager du code entre composants React</p>
          </div>

          <div className="flex space-x-2">
            <Link href="/lessons/module/react-patterns" className="btn-secondary">
              Retour au module
            </Link>
          </div>
        </div>

        <div className="mb-8">
          <div className="w-full bg-gray-200 rounded-full h-2.5">
            <div className="bg-indigo-600 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div>
          </div>
          <div className="flex justify-between mt-2">
            <span className="text-sm text-gray-600">Progression: {progress}%</span>
            {progress === 100 && (
              <span className="text-sm text-green-600 font-medium">Module compl√©t√©! üéâ</span>
            )}
          </div>
        </div>

        <div className="flex space-x-4 mb-8">
          <button
            onClick={() => setActiveSection("theory")}
            className={`px-4 py-2 rounded-md transition-colors ${
              activeSection === "theory" 
                ? "bg-indigo-600 text-white" 
                : "bg-gray-200 hover:bg-gray-300"
            }`}
          >
            Th√©orie
          </button>
          <button
            onClick={() => setActiveSection("practice")}
            className={`px-4 py-2 rounded-md transition-colors ${
              activeSection === "practice" 
                ? "bg-indigo-600 text-white" 
                : "bg-gray-200 hover:bg-gray-300"
            }`}
          >
            Pratique
          </button>
          <button
            onClick={() => setActiveSection("quiz")}
            className={`px-4 py-2 rounded-md transition-colors ${
              activeSection === "quiz" 
                ? "bg-indigo-600 text-white" 
                : "bg-gray-200 hover:bg-gray-300"
            }`}
          >
            Quiz
          </button>
        </div>

        {activeSection === "theory" && (
          <motion.div
            key="theory"
            variants={contentVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="space-y-6"
          >
            <div className="prose max-w-none">
              <h2>Qu'est-ce que le pattern Render Props?</h2>
              <p>
                Le pattern <strong>Render Props</strong> est une technique en React qui consiste √† passer une fonction comme propri√©t√© (prop) √† un composant. Cette fonction retourne un √©l√©ment React et d√©termine ce que le composant va rendre.
              </p>
              <p>
                Ce pattern permet de <strong>partager la logique entre composants</strong> de mani√®re plus flexible que l'h√©ritage ou la composition simple. Il encapsule le comportement que vous souhaitez partager, puis le rend disponible √† d'autres composants en leur donnant la possibilit√© de d√©cider comment ce comportement sera affich√©.
              </p>

              <h3>Exemple de base: Suivi de la position de la souris</h3>
              <p>
                Imaginons que nous voulons cr√©er un composant qui suit la position de la souris. Avec le pattern Render Props, nous pouvons encapsuler cette logique et la rendre r√©utilisable:
              </p>

              <div className="bg-gray-100 p-4 rounded-md">
                <CodePreviewSandbox code={renderPropExample} language="jsx" />
              </div>

              <h3>Pourquoi utiliser des Render Props?</h3>
              <ul>
                <li><strong>S√©paration des pr√©occupations</strong>: La logique et l'affichage sont s√©par√©s.</li>
                <li><strong>R√©utilisation du code</strong>: La m√™me logique peut √™tre utilis√©e avec diff√©rentes interfaces utilisateur.</li>
                <li><strong>Personnalisation</strong>: Le composant parent a un contr√¥le total sur ce qui est rendu.</li>
                <li><strong>√âvite la collision de props</strong>: Contrairement aux HOC (Higher-Order Components), les Render Props √©vitent les probl√®mes de collision de noms de props.</li>
              </ul>

              <h3>Utilisation de children comme Render Prop</h3>
              <p>
                Au lieu d'utiliser une prop nomm√©e explicitement <code>render</code>, on peut √©galement utiliser la prop sp√©ciale <code>children</code> comme fonction:
              </p>

              <div className="bg-gray-100 p-4 rounded-md">
                <CodePreviewSandbox code={propsChildrenExample} language="jsx" />
              </div>

              <p>
                Cette approche permet une syntaxe JSX plus propre et plus lisible.
              </p>

              <h3>Exemple pratique: Un composant Toggle</h3>
              <p>
                Voici un exemple de composant Toggle qui utilise le pattern Render Props pour g√©rer l'√©tat et exposer des fonctions:
              </p>

              <div className="bg-gray-100 p-4 rounded-md">
                <CodePreviewSandbox code={toggleExample} language="jsx" />
              </div>

              <h3>Render Props vs Hooks</h3>
              <p>
                Avec l'introduction des Hooks dans React, certains cas d'usage des Render Props peuvent √™tre remplac√©s par des custom hooks. Cependant, les Render Props restent utiles dans des sc√©narios o√π:
              </p>
              <ul>
                <li>Vous avez besoin de personnaliser le rendu bas√© sur une logique complexe</li>
                <li>Vous travaillez avec des biblioth√®ques qui utilisent ce pattern</li>
                <li>Vous avez besoin d'une s√©paration claire entre la logique et le rendu</li>
              </ul>
            </div>

            <div className="flex justify-between mt-8">
              <button 
                className="btn-secondary"
                onClick={() => setActiveSection("practice")}
              >
                Passer √† la pratique
              </button>
              <button
                className="btn-primary"
                onClick={() => completeSection("theory")}
              >
                Marquer comme termin√©
              </button>
            </div>
          </motion.div>
        )}

        {activeSection === "practice" && (
          <motion.div
            key="practice"
            variants={contentVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            className="space-y-6"
          >
            <div className="prose max-w-none mb-6">
              <h2>Exercice: Cr√©er un composant de liste avec Render Props</h2>
              <p>
                Dans cet exercice, vous allez cr√©er un composant <code>ListWithRenderProp</code> qui accepte un tableau d'√©l√©ments et une render prop pour personnaliser l'affichage de chaque √©l√©ment.
              </p>
              <p>
                <strong>Objectifs:</strong>
              </p>
              <ul>
                <li>Cr√©er un composant qui prend un tableau d'items et une fonction <code>renderItem</code></li>
                <li>Le composant doit g√©n√©rer une liste o√π chaque √©l√©ment est rendu par la fonction <code>renderItem</code></li>
                <li>Utiliser le composant pour afficher une liste d'utilisateurs</li>
              </ul>
            </div>

            <ExerciseComponent
              initialCode={exerciseInitialCode}
              solutionCode={exerciseSolution}
              language="jsx"
              onComplete={() => completeSection("practice")}
            />

            <div className="flex justify-between mt-8">
              <button 
                className="btn-secondary"
                onClick={() => setActiveSection("theory")}
              >
                Revenir √† la th√©orie
              </button>
              <button 
                className="btn-secondary"
                onClick={() => setActiveSection("quiz")}
              >
                Passer au quiz
              </button>
            </div>
          </motion.div>
        )}

        {activeSection === "quiz" && (
          <motion.div
            key="quiz"
            variants={contentVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            <QuizComponent
              questions={quizQuestions}
              onComplete={() => completeSection("quiz")}
            />

            <div className="flex justify-between mt-8">
              <button 
                className="btn-secondary"
                onClick={() => setActiveSection("practice")}
              >
                Revenir √† la pratique
              </button>
              <Link
                href="/lessons/module/react-patterns"
                className="btn-primary"
              >
                Terminer la le√ßon
              </Link>
            </div>
          </motion.div>
        )}
      </div>
    </div>
  );
}