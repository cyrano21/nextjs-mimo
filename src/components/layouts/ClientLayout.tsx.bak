"use client";

import React, { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import { useTheme } from "next-themes";

interface ClientLayoutProps {
  children: React.ReactNode;
}

export default function ClientLayout({ children }: ClientLayoutProps) {
  const pathname = usePathname();
  const { theme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // Ne rendre les éléments dépendant du thème que côté client
  useEffect(() => {
    setMounted(true);
  }, []);

  // Effet pour gérer les éventuelles erreurs de parsing JSON
  useEffect(() => {
    // Nettoyer le cache local si nécessaire
    try {
      if (typeof window !== "undefined" && window.localStorage) {
        const checkCacheIntegrity = () => {
          // Vérifie si les entrées du localStorage liées à Next.js sont valides
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key?.startsWith("next-")) {
              try {
                const value = localStorage.getItem(key);
                if (value) JSON.parse(value);
              } catch (e) {
                console.warn(
                  `Corrupted cache entry detected for ${key}, cleaning...`
                );
                localStorage.removeItem(key);
              }
            }
          }
        };

        checkCacheIntegrity();
      }
    } catch (e) {
      console.error("Error checking cache integrity:", e);
    }
  }, []);

  // Vérifier si la page est une page de module ou leçon
  const isLessonPage =
    pathname.includes("/lessons/module") ||
    pathname.includes("/lessons/lesson");

  // Déterminer si la page actuelle est la page de connexion
  const isLoginPage = pathname === "/login";

  // Si pas encore monté, afficher une version basique sans thème pour éviter l'hydratation
  if (!mounted) {
    return <div className="min-h-screen">{children}</div>;
  }

  return (
    <div
      className={`min-h-screen ${
        isLoginPage ? "flex justify-center items-center" : ""
      }`}
      data-page-type={isLessonPage ? "lesson" : ""}
    >
      {children}
    </div>
  );
}
